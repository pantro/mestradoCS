# -*- coding: utf-8 -*-
"""MO433-IPDI-TRABALHO_04.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KOr9JBF1Wik-kwqhzAm-wPQwshFpBkA9

# UNIVERSIDADE ESTADUAL DE CAMPINAS INSTITUTE OF COMPUTING

## INTRODUCTION TO DIGITAL IMAGE PROCESSING
MC920 / MO443

### HOMEWORK 4

STUDENT: Gian Franco Joel Condori Luna

RA: 234826
"""

!pip install dictances

#import necessary libraries
from google.colab import drive
drive.mount('/content/drive')
import cv2
import numpy as np
import matplotlib.pyplot as plt
from skimage import io, color

#To know what files we have in this route
!ls "/content/drive/My Drive/imagenes/imagens_textura"

"""#1.1 Color Transformation"""

image1 = io.imread('/content/drive/My Drive/imagenes/imagens_textura/textura1.png')
image1_gris = color.rgb2gray(image1)*255
plt.subplot(121),plt.imshow(image1)
plt.title('Image'), plt.xticks([]), plt.yticks([])
plt.subplot(122),plt.imshow(image1_gris, cmap = 'gray')
plt.title('Image Gris'), plt.xticks([]), plt.yticks([])
plt.show()

image2 = io.imread('/content/drive/My Drive/imagenes/imagens_textura/textura2.png')
image2_gris = color.rgb2gray(image2)*255
plt.subplot(121),plt.imshow(image2)
plt.title('Image'), plt.xticks([]), plt.yticks([])
plt.subplot(122),plt.imshow(image2_gris, cmap = 'gray')
plt.title('Image Gris'), plt.xticks([]), plt.yticks([])
plt.show()

image3 = io.imread('/content/drive/My Drive/imagenes/imagens_textura/textura3.png')
image3_gris = color.rgb2gray(image3)*255
plt.subplot(121),plt.imshow(image3)
plt.title('Image'), plt.xticks([]), plt.yticks([])
plt.subplot(122),plt.imshow(image3_gris, cmap = 'gray')
plt.title('Image Gris'), plt.xticks([]), plt.yticks([])
plt.show()

image4 = io.imread('/content/drive/My Drive/imagenes/imagens_textura/textura4.png')
image4_gris = color.rgb2gray(image4)*255
plt.subplot(121),plt.imshow(image4)
plt.title('Image'), plt.xticks([]), plt.yticks([])
plt.subplot(122),plt.imshow(image4_gris, cmap = 'gray')
plt.title('Image Gris'), plt.xticks([]), plt.yticks([])
plt.show()

"""#1.2 Local Binary Patterns"""

from skimage.feature import local_binary_pattern

lbp1 = local_binary_pattern(image1_gris, 8, 1)
lbp1 = lbp1.astype('uint8')
plt.subplot(121),plt.imshow(image1)
plt.title('Image'), plt.xticks([]), plt.yticks([])
plt.subplot(122),plt.imshow(lbp1, cmap = 'gray')
plt.title('Image lbp'), plt.xticks([]), plt.yticks([])
plt.show()

lbp2 = local_binary_pattern(image2_gris, 8, 1)
lbp2 = lbp2.astype('uint8')
plt.subplot(121),plt.imshow(image2)
plt.title('Image'), plt.xticks([]), plt.yticks([])
plt.subplot(122),plt.imshow(lbp2, cmap = 'gray')
plt.title('Image lbp'), plt.xticks([]), plt.yticks([])
plt.show()

lbp3 = local_binary_pattern(image3_gris, 8, 1)
lbp3 = lbp3.astype('uint8')
plt.subplot(121),plt.imshow(image3)
plt.title('Image'), plt.xticks([]), plt.yticks([])
plt.subplot(122),plt.imshow(lbp3, cmap = 'gray')
plt.title('Image lbp'), plt.xticks([]), plt.yticks([])
plt.show()

lbp4 = local_binary_pattern(image4_gris, 8, 1)
lbp4 = lbp4.astype('uint8')
plt.subplot(121),plt.imshow(image4)
plt.title('Image'), plt.xticks([]), plt.yticks([])
plt.subplot(122),plt.imshow(lbp4, cmap = 'gray')
plt.title('Image lbp'), plt.xticks([]), plt.yticks([])
plt.show()

"""#1.3 Comparison between texture images

##Histrograms
"""

histogram, points = np.histogram(lbp1, bins=np.arange(2**8 + 1), density=True)
plt.title('Textura 1'), plt.xticks([]), plt.yticks([])
plt.plot(histogram)
plt.show()

histogram, points = np.histogram(lbp2, bins=np.arange(2**8 + 1), density=True)
plt.title('Textura 2'), plt.xticks([]), plt.yticks([])
plt.plot(histogram)
plt.show()

histogram, points = np.histogram(lbp3, bins=np.arange(2**8 + 1), density=True)
plt.title('Textura 3'), plt.xticks([]), plt.yticks([])
plt.plot(histogram)
plt.show()

histogram, points = np.histogram(lbp4, bins=np.arange(2**8 + 1), density=True)
plt.title('Textura 4'), plt.xticks([]), plt.yticks([])
plt.plot(histogram)
plt.show()

PATCH_SIZE = 100 #image size patch
# select some patches
patch1_locations = [(50, 50)]
patch1_patches = []
for loc in patch1_locations:
    patch1_patches.append(lbp3[loc[0]:loc[0] + PATCH_SIZE,
                               loc[1]:loc[1] + PATCH_SIZE])
patch1 = patch1_patches[0]
# select some patches
patch2_locations = [(400, 400)]
patch2_patches = []
for loc in patch2_locations:
    patch2_patches.append(lbp3[loc[0]:loc[0] + PATCH_SIZE,
                             loc[1]:loc[1] + PATCH_SIZE])
patch2 = patch2_patches[0]
# create the figure
fig = plt.figure(figsize=(10, 10))

# Display the image and patches
#Origin Image
ax = fig.add_subplot(131)
ax.imshow(lbp3, cmap=plt.cm.gray, vmin=0, vmax=255)
ax.set_xlabel('Origin Image')
#Patch 1
ax = fig.add_subplot(132)
ax.imshow(patch1, cmap=plt.cm.gray, vmin=0, vmax=255)
ax.set_xlabel('Patch1')
#Patch 2
ax = fig.add_subplot(133)
ax.imshow(patch2, cmap=plt.cm.gray, vmin=0, vmax=255)
ax.set_xlabel('Patch2')
plt.show()

#Histogram patch
hist_patch1, points1 = np.histogram(patch1, bins=np.arange(2**8 + 1), density=True)
hist_patch2, points2 = np.histogram(patch2, bins=np.arange(2**8 + 1), density=True)
#Graph
plt.subplot(121),plt.plot(hist_patch1)
plt.title('hist_patch1'), plt.xticks([]), plt.yticks([])
plt.subplot(122),plt.plot(hist_patch2)
plt.title('hist_patch2'), plt.xticks([]), plt.yticks([])
plt.show()

"""###Euclidean distance"""

from scipy.spatial.distance import euclidean
euclidean(hist_patch1, hist_patch2)

"""###Bhattacharyya"""

from dictances import bhattacharyya
bhattacharyya(dict(enumerate(hist_patch1)), dict(enumerate(hist_patch2)))

"""##Co-occurrence matrix


"""

#import necessary libraries
import matplotlib.pyplot as plt

from skimage.feature import greycomatrix, greycoprops
from skimage import io, color
import cv2
import numpy as np

#Read image
image = io.imread('/content/drive/My Drive/imagenes/imagens_textura/textura2.png')
image_gris = color.rgb2gray(image)*255
image_int = image_gris.astype("uint8")

plt.subplot(131),plt.imshow(image)
plt.title('Image'), plt.xticks([]), plt.yticks([])
plt.subplot(132),plt.imshow(image_gris, cmap = 'gray')
plt.title('Image Gris'), plt.xticks([]), plt.yticks([])
plt.subplot(133),plt.imshow(image_int, cmap = 'gray')
plt.title('Image Integer'), plt.xticks([]), plt.yticks([])
plt.show()

#Full image co-occurrence matrix
GLCM = greycomatrix(image_int, [1], [0, np.pi/4, np.pi/2, 3*np.pi/4])
GLCM

#Prop co-ocurrence matrix
dissimilarity_full= greycoprops(GLCM, 'dissimilarity')[0, 0]
correlation_full= greycoprops(GLCM, 'correlation')[0, 0]
homogeneity_full= greycoprops(GLCM, 'homogeneity')[0, 0]
energy_full= greycoprops(GLCM, 'energy')[0, 0]
contrast_full= greycoprops(GLCM, 'contrast')[0, 0]
print("dissimilarity full image: ", dissimilarity_full)
print("correlation full image: ", correlation_full)
print("homogeneity full image: ", homogeneity_full)
print("energy full image: ", energy_full)
print("contrast full image: ", contrast_full)

PATCH_SIZE = 50 #image size patch
# select some patches
upper_locations = [(50, 50), (50, 350)]
upper_patches = []
for loc in upper_locations:
    upper_patches.append(image_int[loc[0]:loc[0] + PATCH_SIZE,
                               loc[1]:loc[1] + PATCH_SIZE])

# select some patches
lower_locations = [(350, 60), (400, 400)]
lower_patches = []
for loc in lower_locations:
    lower_patches.append(image_int[loc[0]:loc[0] + PATCH_SIZE,
                             loc[1]:loc[1] + PATCH_SIZE])

# compute some GLCM properties each patch
diss_sim = []
corr = []
homogen = []
energy = []
contrast = []
for patch in (upper_patches + lower_patches):
    glcm = greycomatrix(patch, distances=[5], angles=[0], levels=256,
                        symmetric=True, normed=True)
    diss_sim.append(greycoprops(glcm, 'dissimilarity')[0, 0]) #[0,0] to convert array to value
    corr.append(greycoprops(glcm, 'correlation')[0, 0])
    homogen.append(greycoprops(glcm, 'homogeneity')[0, 0])
    energy.append(greycoprops(glcm, 'energy')[0, 0])
    contrast.append(greycoprops(glcm, 'contrast')[0, 0])

# OPTIONAL PLOTTING for Visualization of points and patches
# create the figure
fig = plt.figure(figsize=(10, 10))

# display original image with locations of patches
ax = fig.add_subplot(3, 2, 1)
ax.imshow(image_int, cmap=plt.cm.gray, vmin=0, vmax=255)
for (y, x) in upper_locations:
    ax.plot(x + PATCH_SIZE / 2, y + PATCH_SIZE / 2, 'gs')
for (y, x) in lower_locations:
    ax.plot(x + PATCH_SIZE / 2, y + PATCH_SIZE / 2, 'bs')
ax.set_xlabel('Original Image')
ax.set_xticks([])
ax.set_yticks([])
ax.axis('image')

# for each patch, plot (dissimilarity, correlation)
ax = fig.add_subplot(3, 2, 2)
ax.plot(diss_sim[:len(upper_patches)], corr[:len(upper_patches)], 'go',
        label='Upper')
ax.plot(diss_sim[len(upper_patches):], corr[len(upper_patches):], 'bo',
        label='Lower')
ax.set_xlabel('GLCM Dissimilarity')
ax.set_ylabel('GLCM Correlation')
ax.legend()

# display the image patches
for i, patch in enumerate(upper_patches):
    ax = fig.add_subplot(3, len(upper_patches), len(upper_patches)*1 + i + 1)
    ax.imshow(patch, cmap=plt.cm.gray,
              vmin=0, vmax=255)
    ax.set_xlabel('Upper %d' % (i + 1))

for i, patch in enumerate(lower_patches):
    ax = fig.add_subplot(3, len(lower_patches), len(lower_patches)*2 + i + 1)
    ax.imshow(patch, cmap=plt.cm.gray,
              vmin=0, vmax=255)
    ax.set_xlabel('Lower %d' % (i + 1))


# display the patches and plot
fig.suptitle('Grey level co-occurrence matrix features', fontsize=14, y=1.05)
plt.tight_layout()
plt.show()

print("            dissimilarity   |     correlation     |     homogeneity      |        energy        |     contrast")
print("Upper 1: ", diss_sim[0], "| ", corr[0]," |", homogen[0]," |", energy[0],"|", contrast[0])
print("Upper 2: ", diss_sim[1], "|", corr[1]," |", homogen[1]," |", energy[1],"|", contrast[1])
print("Lower 1: ", diss_sim[2], "|", corr[2],"|", homogen[2],"|", energy[2]," |", contrast[2])
print("Lower 2: ", diss_sim[3], "|", corr[3],"|", homogen[3]," |", energy[3]," |", contrast[3])